{"version":3,"sources":["components/Container.js","components/Header.js","components/FormSection.js","components/Input.js","components/Label.js","components/FormControl.js","components/PersonalInfoFormSection.js","components/Button.js","components/AddButton.js","components/ButtonGroup.js","components/DeleteButton.js","components/FormPartial.js","components/EducationFormPartial.js","components/EducationFormSection.js","components/WorkExperienceFormPartial.js","components/WorkExperienceFormSection.js","components/DoneButton.js","components/Panel.js","components/Form.js","components/EditButton.js","components/Result.js","components/Main.js","App.js","index.js"],"names":["Container","props","className","children","Header","FormSection","title","Input","styles","classNames","type","Label","FormControl","PersonalInfoFormSection","personalInfo","onPersonalInfoChange","handleChange","e","newPersonalInfo","target","name","value","htmlFor","id","firstName","onChange","lastName","email","phoneNumber","Button","AddButton","ButtonGroup","DeleteButton","FormPartial","EducationFormPartial","education","onEducationChange","onEducationDelete","split","schoolName","titleOfStudy","dateOfStudy","onClick","EducationFormSection","educationList","onEducationAdd","map","edu","WorkExperienceFormPartial","experience","onExperienceChange","onExperienceDelete","companyName","positionTitle","mainTasks","dateFrom","dateUntil","WorkExperienceFormSection","experienceList","onExperienceAdd","DoneButton","Panel","Form","onSubmit","preventDefault","EditButton","Result","onEdit","exp","Main","useState","setPersonalInfo","setEducation","setExperience","isSubmitted","setSubmitted","data","newEducation","uniqid","filter","newExperience","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1322af7.chunk.js","sourcesContent":["import \"./Container.css\";\n\nexport default function Container(props) {\n  return (\n    <div {...props} className=\"container\">\n      {props.children}\n    </div>\n  );\n}\n","import \"./Header.css\";\nimport Container from \"./Container\";\n\nexport default function Header() {\n  return (\n    <header className=\"main-header\">\n      <Container>\n        <h1 className=\"main-heading\">CV App</h1>\n      </Container>\n    </header>\n  );\n}\n","import \"./FormSection.css\";\nimport PropTypes from \"prop-types\";\n\nexport default function FormSection({ title, children }) {\n  return (\n    <div className=\"form-section\">\n      <h2 className=\"form-heading\">{title}</h2>\n      {children}\n    </div>\n  );\n}\n\nFormSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import \"./Input.css\";\nimport classNames from \"classnames\";\n\nexport default function Input(props) {\n  const styles = classNames(\"form-input\", props.className);\n  let element =\n    props.type === \"textarea\" ? (\n      <textarea {...props} className={styles} />\n    ) : (\n      <input {...props} className={styles} />\n    );\n\n  return element;\n}\n","import \"./Label.css\";\nimport classNames from \"classnames\";\n\nexport default function Label(props) {\n  const styles = classNames(\"label\", props.className);\n  return (\n    <label {...props} className={styles}>\n      {props.children}\n    </label>\n  );\n}\n","import \"./FormControl.css\";\n\nexport default function FormControl(props) {\n  return (\n    <div {...props} className=\"form-control\">\n      {props.children}\n    </div>\n  );\n}\n","import PropTypes from \"prop-types\";\nimport FormSection from \"./FormSection\";\nimport Input from \"./Input\";\nimport Label from \"./Label\";\nimport FormControl from \"./FormControl\";\n\nexport default function PersonalInfoFormSection({\n  personalInfo,\n  onPersonalInfoChange,\n}) {\n  const handleChange = (e) => {\n    const newPersonalInfo = {\n      ...personalInfo,\n      [e.target.name]: e.target.value,\n    };\n    onPersonalInfoChange(newPersonalInfo);\n  };\n\n  return (\n    <FormSection title=\"Personal Info\">\n      <FormControl>\n        <Label htmlFor=\"firstName\">First Name:</Label>\n        <Input\n          type=\"text\"\n          name=\"firstName\"\n          id=\"firstName\"\n          value={personalInfo.firstName}\n          onChange={handleChange}\n        />\n      </FormControl>\n      <FormControl>\n        <Label htmlFor=\"lastName\">Last Name:</Label>\n        <Input\n          type=\"text\"\n          name=\"lastName\"\n          id=\"lastName\"\n          value={personalInfo.lastName}\n          onChange={handleChange}\n        />\n      </FormControl>\n      <FormControl>\n        <Label htmlFor=\"email\">Email:</Label>\n        <Input\n          type=\"text\"\n          name=\"email\"\n          id=\"email\"\n          value={personalInfo.email}\n          onChange={handleChange}\n        />\n      </FormControl>\n      <FormControl>\n        <Label htmlFor=\"phoneNumber\">Phone:</Label>\n        <Input\n          type=\"text\"\n          name=\"phoneNumber\"\n          id=\"phoneNumber\"\n          value={personalInfo.phoneNumber}\n          onChange={handleChange}\n        />\n      </FormControl>\n    </FormSection>\n  );\n}\n\nPersonalInfoFormSection.propTypes = {\n  personalInfo: PropTypes.shape({\n    firstName: PropTypes.string,\n    lastName: PropTypes.string,\n    email: PropTypes.string,\n    phoneNumber: PropTypes.string,\n  }).isRequired,\n  onPersonalInfoChange: PropTypes.func.isRequired,\n};\n","import \"./Button.css\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nexport default function Button(props) {\n  const styles = classNames(\"btn\", props.className);\n  return (\n    <button {...props} className={styles}>\n      {props.children}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  className: PropTypes.string,\n};\n","import \"./AddButton.css\";\nimport Button from \"./Button\";\n\nexport default function AddButton(props) {\n  return (\n    <Button {...props} className=\"btn-add\" type=\"button\">\n      {props.children}\n    </Button>\n  );\n}\n","import \"./ButtonGroup.css\";\n\nexport default function ButtonGroup(props) {\n  return (\n    <div {...props} className=\"button-group\">\n      {props.children}\n    </div>\n  );\n}\n","import \"./DeleteButton.css\";\nimport Button from \"./Button\";\n\nexport default function DeleteButton(props) {\n  return (\n    <Button {...props} className=\"btn-delete\" type=\"button\">\n      {props.children}\n    </Button>\n  );\n}\n","import \"./FormPartial.css\";\n\nexport default function FormPartial(props) {\n  return (\n    <div {...props} className=\"form-partial\">\n      {props.children}\n    </div>\n  );\n}\n","import PropTypes from \"prop-types\";\nimport ButtonGroup from \"./ButtonGroup\";\nimport DeleteButton from \"./DeleteButton\";\nimport Input from \"./Input\";\nimport Label from \"./Label\";\nimport FormControl from \"./FormControl\";\nimport FormPartial from \"./FormPartial\";\n\nexport default function EducationFormPartial({\n  education,\n  onEducationChange,\n  onEducationDelete,\n}) {\n  const handleChange = (e, id) => {\n    const [name] = e.target.name.split(\"-\");\n    const value = e.target.value;\n    onEducationChange(id, name, value);\n  };\n  return (\n    <FormPartial>\n      <FormControl>\n        <Label htmlFor={`schoolName-${education.id}`}>School Name:</Label>\n        <Input\n          type=\"text\"\n          name={`schoolName-${education.id}`}\n          id={`schoolName-${education.id}`}\n          value={education.schoolName}\n          onChange={(e) => handleChange(e, education.id)}\n        />\n      </FormControl>\n      <FormControl>\n        <Label htmlFor={`titleOfStudy-${education.id}`}>Title of Study:</Label>\n        <Input\n          type=\"text\"\n          name={`titleOfStudy-${education.id}`}\n          id={`titleOfStudy-${education.id}`}\n          value={education.titleOfStudy}\n          onChange={(e) => handleChange(e, education.id)}\n        />\n      </FormControl>\n      <FormControl>\n        <Label htmlFor={`dateOfStudy-${education.id}`}>Date of Study:</Label>\n        <Input\n          type=\"text\"\n          name={`dateOfStudy-${education.id}`}\n          id={`dateOfStudy-${education.id}`}\n          value={education.dateOfStudy}\n          onChange={(e) => handleChange(e, education.id)}\n        />\n      </FormControl>\n\n      <ButtonGroup>\n        <DeleteButton onClick={() => onEducationDelete(education.id)}>\n          Remove education\n        </DeleteButton>\n      </ButtonGroup>\n    </FormPartial>\n  );\n}\n\nEducationFormPartial.propTypes = {\n  education: PropTypes.shape({\n    id: PropTypes.string,\n    schoolName: PropTypes.string,\n    titleOfStudy: PropTypes.string,\n    dateOfStudy: PropTypes.string,\n  }).isRequired,\n  onEducationChange: PropTypes.func.isRequired,\n  onEducationDelete: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\nimport AddButton from \"./AddButton\";\nimport ButtonGroup from \"./ButtonGroup\";\nimport EducationFormPartial from \"./EducationFormPartial\";\nimport FormSection from \"./FormSection\";\n\nexport default function EducationFormSection({\n  educationList,\n  onEducationChange,\n  onEducationAdd,\n  onEducationDelete,\n}) {\n  return (\n    <FormSection title=\"Education\">\n      <div className=\"form-group\">\n        {educationList.map((edu) => (\n          <EducationFormPartial\n            key={edu.id}\n            education={edu}\n            onEducationChange={onEducationChange}\n            onEducationDelete={onEducationDelete}\n          />\n        ))}\n      </div>\n      <ButtonGroup>\n        <AddButton onClick={onEducationAdd}>Add Education</AddButton>\n      </ButtonGroup>\n    </FormSection>\n  );\n}\n\nEducationFormSection.propTypes = {\n  educationList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      schoolName: PropTypes.string,\n      titleOfStudy: PropTypes.string,\n      dateOfStudy: PropTypes.string,\n    })\n  ).isRequired,\n  onEducationChange: PropTypes.func.isRequired,\n  onEducationAdd: PropTypes.func.isRequired,\n  onEducationDelete: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\nimport ButtonGroup from \"./ButtonGroup\";\nimport DeleteButton from \"./DeleteButton\";\nimport Input from \"./Input\";\nimport Label from \"./Label\";\nimport FormControl from \"./FormControl\";\nimport FormPartial from \"./FormPartial\";\n\nexport default function WorkExperienceFormPartial({\n  experience,\n  onExperienceChange,\n  onExperienceDelete,\n}) {\n  const handleChange = (e, id) => {\n    const [name] = e.target.name.split(\"-\");\n    const value = e.target.value;\n    onExperienceChange(id, name, value);\n  };\n  return (\n    <FormPartial>\n      <FormControl>\n        <Label htmlFor={`companyName-${experience.id}`}>Company Name:</Label>\n        <Input\n          type=\"text\"\n          name={`companyName-${experience.id}`}\n          id={`companyName-${experience.id}`}\n          value={experience.companyName}\n          onChange={(e) => handleChange(e, experience.id)}\n        />\n      </FormControl>\n      <FormControl>\n        <Label htmlFor={`positionTitle-${experience.id}`}>Position:</Label>\n        <Input\n          type=\"text\"\n          name={`positionTitle-${experience.id}`}\n          id={`positionTitle-${experience.id}`}\n          value={experience.positionTitle}\n          onChange={(e) => handleChange(e, experience.id)}\n        />\n      </FormControl>\n      <FormControl>\n        <Label htmlFor={`mainTasks-${experience.id}`}>Main Tasks:</Label>\n        <Input\n          type=\"textarea\"\n          name={`mainTasks-${experience.id}`}\n          id={`mainTasks-${experience.id}`}\n          value={experience.mainTasks}\n          onChange={(e) => handleChange(e, experience.id)}\n        />\n      </FormControl>\n      <FormControl>\n        <Label htmlFor={`dateFrom-${experience.id}`}>Date From:</Label>\n        <Input\n          type=\"text\"\n          name={`dateFrom-${experience.id}`}\n          id={`dateFrom-${experience.id}`}\n          value={experience.dateFrom}\n          onChange={(e) => handleChange(e, experience.id)}\n        />\n      </FormControl>\n      <FormControl>\n        <Label htmlFor={`dateUntil-${experience.id}`}>Date Until:</Label>\n        <Input\n          type=\"text\"\n          name={`dateUntil-${experience.id}`}\n          id={`dateUntil-${experience.id}`}\n          value={experience.dateUntil}\n          onChange={(e) => handleChange(e, experience.id)}\n        />\n      </FormControl>\n\n      <ButtonGroup>\n        <DeleteButton onClick={() => onExperienceDelete(experience.id)}>\n          Remove Work Experience\n        </DeleteButton>\n      </ButtonGroup>\n    </FormPartial>\n  );\n}\n\nWorkExperienceFormPartial.propTypes = {\n  experience: PropTypes.shape({\n    id: PropTypes.string,\n    companyName: PropTypes.string,\n    positionTitle: PropTypes.string,\n    mainTasks: PropTypes.string,\n    dateFrom: PropTypes.string,\n    dateUntil: PropTypes.string,\n  }).isRequired,\n  onExperienceChange: PropTypes.func.isRequired,\n  onExperienceDelete: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\nimport AddButton from \"./AddButton\";\nimport ButtonGroup from \"./ButtonGroup\";\nimport FormSection from \"./FormSection\";\nimport WorkExperienceFormPartial from \"./WorkExperienceFormPartial\";\n\nexport default function WorkExperienceFormSection({\n  experienceList,\n  onExperienceChange,\n  onExperienceAdd,\n  onExperienceDelete,\n}) {\n  return (\n    <FormSection title=\"Work Experience\">\n      <div className=\"form-group\">\n        {experienceList.map((edu) => (\n          <WorkExperienceFormPartial\n            key={edu.id}\n            experience={edu}\n            onExperienceChange={onExperienceChange}\n            onExperienceDelete={onExperienceDelete}\n          />\n        ))}\n      </div>\n      <ButtonGroup>\n        <AddButton onClick={onExperienceAdd}>Add Experience</AddButton>\n      </ButtonGroup>\n    </FormSection>\n  );\n}\n\nWorkExperienceFormSection.propTypes = {\n  experienceList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      companyName: PropTypes.string,\n      positionTitle: PropTypes.string,\n      mainTasks: PropTypes.string,\n      dateFrom: PropTypes.string,\n      dateUntil: PropTypes.string,\n    })\n  ).isRequired,\n  onExperienceChange: PropTypes.func.isRequired,\n  onExperienceAdd: PropTypes.func.isRequired,\n  onExperienceDelete: PropTypes.func.isRequired,\n};\n","import \"./DoneButton.css\";\nimport Button from \"./Button\";\n\nexport default function DoneButton() {\n  return (\n    <Button className=\"btn-done\" type=\"submit\">\n      Done\n    </Button>\n  );\n}\n","import \"./Panel.css\";\n\nexport default function Panel(props) {\n  return (\n    <div {...props} className=\"panel\">\n      {props.children}\n    </div>\n  );\n}\n","import \"./Form.css\";\nimport PropTypes from \"prop-types\";\nimport PersonalInfoFormSection from \"./PersonalInfoFormSection\";\nimport EducationFormSection from \"./EducationFormSection\";\nimport WorkExperienceFormSection from \"./WorkExperienceFormSection\";\nimport DoneButton from \"./DoneButton\";\nimport Panel from \"./Panel\";\n\nexport default function Form({\n  personalInfo,\n  onPersonalInfoChange,\n  educationList,\n  onEducationChange,\n  onEducationAdd,\n  onEducationDelete,\n  experienceList,\n  onExperienceChange,\n  onExperienceAdd,\n  onExperienceDelete,\n  onSubmit,\n}) {\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit();\n  };\n\n  return (\n    <form className=\"form-bg\" onSubmit={handleSubmit}>\n      <Panel>\n        <PersonalInfoFormSection\n          personalInfo={personalInfo}\n          onPersonalInfoChange={onPersonalInfoChange}\n        />\n        <EducationFormSection\n          educationList={educationList}\n          onEducationChange={onEducationChange}\n          onEducationAdd={onEducationAdd}\n          onEducationDelete={onEducationDelete}\n        />\n        <WorkExperienceFormSection\n          experienceList={experienceList}\n          onExperienceChange={onExperienceChange}\n          onExperienceAdd={onExperienceAdd}\n          onExperienceDelete={onExperienceDelete}\n        />\n        <div className=\"button-group\">\n          <DoneButton />\n        </div>\n      </Panel>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  personalInfo: PropTypes.shape({\n    firstName: PropTypes.string,\n    lastName: PropTypes.string,\n    email: PropTypes.string,\n    phoneNumber: PropTypes.string,\n  }).isRequired,\n  onPersonalInfoChange: PropTypes.func.isRequired,\n  educationList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      schoolName: PropTypes.string,\n      titleOfStudy: PropTypes.string,\n      dateOfStudy: PropTypes.string,\n    })\n  ).isRequired,\n  onEducationChange: PropTypes.func.isRequired,\n  onEducationAdd: PropTypes.func.isRequired,\n  onEducationDelete: PropTypes.func.isRequired,\n  experienceList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      companyName: PropTypes.string,\n      positionTitle: PropTypes.string,\n      mainTasks: PropTypes.string,\n      dateFrom: PropTypes.string,\n      dateUntil: PropTypes.string,\n    })\n  ).isRequired,\n  onExperienceChange: PropTypes.func.isRequired,\n  onExperienceAdd: PropTypes.func.isRequired,\n  onExperienceDelete: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n","import \"./EditButton.css\";\nimport Button from \"./Button\";\n\nexport default function EditButton(props) {\n  return (\n    <Button {...props} className=\"btn-edit\" type=\"button\">\n      Edit\n    </Button>\n  );\n}\n","import PropTypes from \"prop-types\";\nimport ButtonGroup from \"./ButtonGroup\";\nimport EditButton from \"./EditButton\";\nimport Panel from \"./Panel\";\nimport \"./Result.css\";\n\nexport default function Result({\n  personalInfo,\n  educationList,\n  experienceList,\n  onEdit,\n}) {\n  return (\n    <>\n      <div className=\"result-bg\">\n        <Panel>\n          <div className=\"result-section result-section--main\">\n            <h2 className=\"result-mainheading\">\n              {personalInfo.firstName} {personalInfo.lastName}\n            </h2>\n            <div className=\"result-info\">\n              <p className=\"result-label\">Email</p>\n              <p className=\"result-text\">{personalInfo.email}</p>\n              <p className=\"result-label\">Phone</p>\n              <p className=\"result-text\">{personalInfo.phoneNumber}</p>\n            </div>\n          </div>\n          <div className=\"result-section\">\n            <h3 className=\"result-subheading\">Education</h3>\n            <ul className=\"result-list\">\n              {educationList.map((edu) => (\n                <li key={edu.id}>\n                  <p className=\"result-label\">{edu.schoolName}</p>\n                  <p className=\"result-text\">\n                    Title of Study: {edu.titleOfStudy}\n                  </p>\n                  <p className=\"result-text\">Date: {edu.dateOfStudy}</p>\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"result-section\">\n            <h3 className=\"result-subheading\">Work Experience</h3>\n            <ul className=\"result-list\">\n              {experienceList.map((exp) => (\n                <li key={exp.id}>\n                  <p className=\"result-label\">{exp.companyName}</p>\n                  <p className=\"result-text\">Position: {exp.positionTitle}</p>\n                  <p className=\"result-text\">Main Tasks: {exp.mainTasks}</p>\n                  <p className=\"result-text\">Date From: {exp.dateFrom}</p>\n                  <p className=\"result-text\">Date Until: {exp.dateUntil}</p>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </Panel>\n      </div>\n      <ButtonGroup>\n        <EditButton onClick={onEdit} />\n      </ButtonGroup>\n    </>\n  );\n}\n\nResult.propTypes = {\n  personalInfo: PropTypes.shape({\n    firstName: PropTypes.string,\n    lastName: PropTypes.string,\n    email: PropTypes.string,\n    phoneNumber: PropTypes.string,\n  }).isRequired,\n  educationList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      schoolName: PropTypes.string,\n      titleOfStudy: PropTypes.string,\n      dateOfStudy: PropTypes.string,\n    })\n  ).isRequired,\n  experienceList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      companyName: PropTypes.string,\n      positionTitle: PropTypes.string,\n      mainTasks: PropTypes.string,\n      dateFrom: PropTypes.string,\n      dateUntil: PropTypes.string,\n    })\n  ).isRequired,\n  onEdit: PropTypes.func.isRequired,\n};\n","import \"./Main.css\";\nimport { useState } from \"react\";\nimport uniqid from \"uniqid\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\nimport Container from \"./Container\";\n\nexport default function Main() {\n  const [personalInfo, setPersonalInfo] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phoneNumber: \"\",\n  });\n  const [education, setEducation] = useState([]);\n  const [experience, setExperience] = useState([]);\n  const [isSubmitted, setSubmitted] = useState(false);\n\n  const handlePersonalInfoChange = (data) => {\n    setPersonalInfo(data);\n  };\n\n  const handleEducationChange = (id, name, value) => {\n    const newEducation = education.map((edu) =>\n      edu.id === id\n        ? {\n            ...edu,\n            [name]: value,\n          }\n        : edu\n    );\n    setEducation(newEducation);\n  };\n\n  const handleEducationAdd = () => {\n    const newEducation = [\n      ...education,\n      { id: uniqid(), schoolName: \"\", titleOfStudy: \"\", dateOfStudy: \"\" },\n    ];\n    setEducation(newEducation);\n  };\n\n  const handleEducationDelete = (id) => {\n    const newEducation = education.filter((edu) => edu.id !== id);\n    setEducation(newEducation);\n  };\n\n  const handleExperienceChange = (id, name, value) => {\n    const newExperience = experience.map((exp) =>\n      exp.id === id\n        ? {\n            ...exp,\n            [name]: value,\n          }\n        : exp\n    );\n    setExperience(newExperience);\n  };\n\n  const handleExperienceAdd = () => {\n    const newExperience = [\n      ...experience,\n      {\n        id: uniqid(),\n        companyName: \"\",\n        positionTitle: \"\",\n        mainTasks: \"\",\n        dateFrom: \"\",\n        dateUntil: \"\",\n      },\n    ];\n    setExperience(newExperience);\n  };\n\n  const handleExperienceDelete = (id) => {\n    const newExperience = experience.filter((exp) => exp.id !== id);\n    setExperience(newExperience);\n  };\n\n  const handleSubmit = () => {\n    setSubmitted(true);\n  };\n\n  const handleEdit = () => {\n    setSubmitted(false);\n  };\n\n  return (\n    <main className=\"main\">\n      <Container>\n        {isSubmitted ? (\n          <Result\n            personalInfo={personalInfo}\n            educationList={education}\n            experienceList={experience}\n            onEdit={handleEdit}\n          />\n        ) : (\n          <Form\n            personalInfo={personalInfo}\n            onPersonalInfoChange={handlePersonalInfoChange}\n            educationList={education}\n            onEducationChange={handleEducationChange}\n            onEducationAdd={handleEducationAdd}\n            onEducationDelete={handleEducationDelete}\n            experienceList={experience}\n            onExperienceChange={handleExperienceChange}\n            onExperienceAdd={handleExperienceAdd}\n            onExperienceDelete={handleExperienceDelete}\n            onSubmit={handleSubmit}\n          />\n        )}\n      </Container>\n    </main>\n  );\n}\n","import Header from \"./components/Header\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Main />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}